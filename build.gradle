/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'

  // Apply the Jacoco plugin to add suppport for JUnit test coverage reports.
  id 'jacoco'
}

// Build and run the project with Java 11
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(16)
  }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
  // Add the JSON-Java dependency
  implementation 'org.json:json:20210307'

  // Use JUnit test framework.
  testImplementation 'junit:junit:4.13.2'
}

application {
  // Define the main class for the application.
  mainClass = 'xrate.Main'
}

test {
  // After running the tests, generate a coverage report
  finalizedBy jacocoTestReport
  // After running the tests, check the coverage level
  finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
  // Running the test report task automatically runs test first
  dependsOn test

  reports {
    // This isn't strictly necessary, but the default reports
    // location is buried pretty deep in the build directory,
    // so this makes it easier to find.
    html.destination file("${buildDir}/jacocoHtml")
  }
}

jacocoTestCoverageVerification {
  // Running the test verification task automatically runs test first
  dependsOn test

  // These are the rules applied to the test coverage
  violationRules {
    rule {
      // We are looking at the entire bundle overall, i.e.,
      // 80% of all instructions across all the Java files
      // (except Server.java) need to be covered.
      element = 'BUNDLE'

      // 80% of instructions should be covered
      limit {
        counter = 'INSTRUCTION'
        minimum = 0.8
      }

      // 80% of lines should be covered
      limit {
        counter = 'LINE'
        minimum = 0.8
      }

      // 80% of branches should be covered
      limit {
        counter = 'BRANCH'
        minimum = 0.8
      }

      // 80% of methods should be covered
      limit {
        counter = 'METHOD'
        minimum = 0.8
      }
    }
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}